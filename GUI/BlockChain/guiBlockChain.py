
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from multiprocessing import pool
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
from tkinter import ttk
import tkinter as tk
from Main.PhilipCoin.Blockchain import BlockChain
from Main.PhilipCoin.User import User
from Main.PhilipCoin.Vigenere import CripVigenere


def guiBlockChain(window):
    global button_image_1, button_image_2, button_image_3, button_image_4, button_image_5, userchoosen, userchoosen2
    global pool_index
    pool_index=1
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets")

    blockchain = BlockChain()
    users = [User('Timmy'), User('Cosmo'), User('Wanda')]
    for user in users:
        user.display_user_wallet()
    print("------------------------------")

    global keys
    global key_index

    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    def generateTransfer():
        i = userchoosen.current()
        j = userchoosen2.current()
        user1 = users[userchoosen.current()]
        user2 = users[userchoosen2.current()]
        value = float(entry_2.get())

        blockchain.transaction(user1, user2, value)
        messagebox.showwarning("", "Transaccion exitosa")
        for user in users:
            user.display_user_wallet()
        print("------------------------------")

    def next_block():
        global pool_index
        pool_index+=1
        if(pool_index>=len(blockchain.pool)):
            pool_index=1

    canvas = Canvas(
        window,
        bg = "#E4E4EE",
        height = 692,
        width = 1191,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 28)
    canvas.create_rectangle(
        630.0,
        0.0,
        1442.0,
        1024.0,
        fill="#164FD5",
        outline="")

    canvas.create_text(
        42.0,
        24.0,
        anchor="nw",
        text="BlockChain",
        fill="#000000",
        font=("Inter", 64 * -1)
    )



    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_1 clicked"),
        relief="flat"
    )
    button_1.place(
        x=737.0,
        y=521.0,
        width=365.0,
        height=66.28958129882812
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [next_block(),print(pool_index)],
        relief="flat"
    )
    button_2.place(
        x=115.0,
        y=623.0,
        width=253.0,
        height=41.0
    )

    

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: next_key(),
        relief="flat"
    )
    button_3.place(
        x=114.0,
        y=505.0,
        width=253.0,
        height=41.0
    )

    def mine():
        global pool_index,key_index,keys
        vig1 = CripVigenere(blockchain.pool[pool_index].problem,str(entry_1.get()))
        if blockchain.mining_attempt(users[1],vig1.desencriptar(),pool_index):
            messagebox.showinfo("", "Bloque minado, Cosmo ha recibido 0.5 phillips") 
            keys = []
            entry_1.delete(0,'end')
            key_index = 0
            pool_index=1
        else:
            messagebox.showinfo("", "No se pudo minar el bloque y Cosmo no ha recibido recompensa.")

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: mine(),
        relief="flat"
    )
    button_4.place(
        x=116.0,
        y=566.0,
        width=253.0,
        height=42.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: generateTransfer(),
        relief="flat"
    )
    button_5.place(
        x=447.0,
        y=313.0,
        width=365.0,
        height=66.2895736694336
    )

    canvas.create_text(
        114.0,
        174.0,
        anchor="nw",
        text="Usuario que Envia",
        fill="#164FD5",
        font=("Inter", 24 * -1)
    )
    n = tk.StringVar()
    userchoosen = ttk.Combobox(window, width=15, textvariable=n, font="Verdana 16 bold")

    # Adding combobox drop down list
    userchoosen['values'] = (' Timmy',
                             ' Cosmo',
                             ' Wanda')

    userchoosen.grid(column=1, row=5)
    userchoosen.place(x=114,y=200)

    canvas.create_text(
        828.0,
        170.0,
        anchor="nw",
        text="Usuario que Recibe",
        fill="#FFFFFF",
        font=("Inter", 24 * -1)
    )
    m = tk.StringVar()
    userchoosen2 = ttk.Combobox(window, width=15, textvariable=m, font="Verdana 16 bold")

    # Adding combobox drop down list
    userchoosen2['values'] = (' Timmy',
                             ' Cosmo',
                             ' Wanda')

    userchoosen2.grid(column=1, row=5)
    userchoosen2.place(x=828, y=200)
    userchoosen2.current(1)


    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        238.0,
        461.5,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#C4C4C4",
        highlightthickness=0,font="Verdana 16 bold"
    )
    entry_1.place(
        x=122.0,
        y=438.0,
        width=232.0,
        height=45.0
    )

    def next_key():
        global key_index
        vig1 = CripVigenere(blockchain.pool[pool_index].problem,'')
        if entry_1.get() == '':
            key_index = 0
        entry_1.delete(0, 'end')
        keys = vig1.criptanalisis()
        if key_index == len(keys):
            key_index = 0
        else:
            key_index += 1
        entry_1.insert(0,vig1.criptanalisis_key(keys[key_index]))
    
    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        630.0,
        268.5,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#C4C4C4",
        highlightthickness=0,font="Verdana 16 bold"
    )
    entry_2.place(
        x=514.0,
        y=245.0,
        width=232.0,
        height=45.0
    )